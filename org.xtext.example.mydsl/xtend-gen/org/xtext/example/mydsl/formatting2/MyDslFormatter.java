/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import mdsd.component_based.EContainer;
import mdsd.component_based.EInterface;
import mdsd.component_based.ERepository;
import mdsd.component_based.ESignature;
import mdsd.component_based.ESystem;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final ESystem eSystem, @Extension final IFormattableDocument document) {
    EList<ERepository> _containsRepos = eSystem.getContainsRepos();
    for (final ERepository eRepository : _containsRepos) {
      document.<ERepository>format(eRepository);
    }
    EList<EContainer> _containsContainers = eSystem.getContainsContainers();
    for (final EContainer eContainer : _containsContainers) {
      document.<EContainer>format(eContainer);
    }
  }

  protected void _format(final EInterface eInterface, @Extension final IFormattableDocument document) {
    EList<ESignature> _signature = eInterface.getSignature();
    for (final ESignature eSignature : _signature) {
      document.<ESignature>format(eSignature);
    }
  }

  public void format(final Object eInterface, final IFormattableDocument document) {
    if (eInterface instanceof XtextResource) {
      _format((XtextResource)eInterface, document);
      return;
    } else if (eInterface instanceof EInterface) {
      _format((EInterface)eInterface, document);
      return;
    } else if (eInterface instanceof ESystem) {
      _format((ESystem)eInterface, document);
      return;
    } else if (eInterface instanceof EObject) {
      _format((EObject)eInterface, document);
      return;
    } else if (eInterface == null) {
      _format((Void)null, document);
      return;
    } else if (eInterface != null) {
      _format(eInterface, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(eInterface, document).toString());
    }
  }
}
