/**
 */
package mdsd.component_based.provider;

import java.util.ArrayList;
import java.util.Collection;

import mdsd.component_based.util.Component_basedAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Component_basedItemProviderAdapterFactory extends Component_basedAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Component_basedItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ERepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERepositoryItemProvider eRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ERepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createERepositoryAdapter() {
		if (eRepositoryItemProvider == null) {
			eRepositoryItemProvider = new ERepositoryItemProvider(this);
		}

		return eRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ESignature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESignatureItemProvider eSignatureItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ESignature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESignatureAdapter() {
		if (eSignatureItemProvider == null) {
			eSignatureItemProvider = new ESignatureItemProvider(this);
		}

		return eSignatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EComponentItemProvider eComponentItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEComponentAdapter() {
		if (eComponentItemProvider == null) {
			eComponentItemProvider = new EComponentItemProvider(this);
		}

		return eComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EInterfaceItemProvider eInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEInterfaceAdapter() {
		if (eInterfaceItemProvider == null) {
			eInterfaceItemProvider = new EInterfaceItemProvider(this);
		}

		return eInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EParameterItemProvider eParameterItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEParameterAdapter() {
		if (eParameterItemProvider == null) {
			eParameterItemProvider = new EParameterItemProvider(this);
		}

		return eParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EServiceItemProvider eServiceItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEServiceAdapter() {
		if (eServiceItemProvider == null) {
			eServiceItemProvider = new EServiceItemProvider(this);
		}

		return eServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EAssemblyContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAssemblyContextItemProvider eAssemblyContextItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EAssemblyContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAssemblyContextAdapter() {
		if (eAssemblyContextItemProvider == null) {
			eAssemblyContextItemProvider = new EAssemblyContextItemProvider(this);
		}

		return eAssemblyContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ECompositeComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECompositeComponentItemProvider eCompositeComponentItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ECompositeComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECompositeComponentAdapter() {
		if (eCompositeComponentItemProvider == null) {
			eCompositeComponentItemProvider = new ECompositeComponentItemProvider(this);
		}

		return eCompositeComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ESystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESystemItemProvider eSystemItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ESystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESystemAdapter() {
		if (eSystemItemProvider == null) {
			eSystemItemProvider = new ESystemItemProvider(this);
		}

		return eSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EAssemblyConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAssemblyConnectorItemProvider eAssemblyConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EAssemblyConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAssemblyConnectorAdapter() {
		if (eAssemblyConnectorItemProvider == null) {
			eAssemblyConnectorItemProvider = new EAssemblyConnectorItemProvider(this);
		}

		return eAssemblyConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EContainerItemProvider eContainerItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEContainerAdapter() {
		if (eContainerItemProvider == null) {
			eContainerItemProvider = new EContainerItemProvider(this);
		}

		return eContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ELink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELinkItemProvider eLinkItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ELink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELinkAdapter() {
		if (eLinkItemProvider == null) {
			eLinkItemProvider = new ELinkItemProvider(this);
		}

		return eLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EAllocationContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAllocationContextItemProvider eAllocationContextItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EAllocationContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAllocationContextAdapter() {
		if (eAllocationContextItemProvider == null) {
			eAllocationContextItemProvider = new EAllocationContextItemProvider(this);
		}

		return eAllocationContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ERequiredDelegationConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERequiredDelegationConnectorItemProvider eRequiredDelegationConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ERequiredDelegationConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createERequiredDelegationConnectorAdapter() {
		if (eRequiredDelegationConnectorItemProvider == null) {
			eRequiredDelegationConnectorItemProvider = new ERequiredDelegationConnectorItemProvider(this);
		}

		return eRequiredDelegationConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EProvidedDelegationConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EProvidedDelegationConnectorItemProvider eProvidedDelegationConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EProvidedDelegationConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEProvidedDelegationConnectorAdapter() {
		if (eProvidedDelegationConnectorItemProvider == null) {
			eProvidedDelegationConnectorItemProvider = new EProvidedDelegationConnectorItemProvider(this);
		}

		return eProvidedDelegationConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ERequiredRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERequiredRoleItemProvider eRequiredRoleItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ERequiredRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createERequiredRoleAdapter() {
		if (eRequiredRoleItemProvider == null) {
			eRequiredRoleItemProvider = new ERequiredRoleItemProvider(this);
		}

		return eRequiredRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EProvidedRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EProvidedRoleItemProvider eProvidedRoleItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EProvidedRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEProvidedRoleAdapter() {
		if (eProvidedRoleItemProvider == null) {
			eProvidedRoleItemProvider = new EProvidedRoleItemProvider(this);
		}

		return eProvidedRoleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EEnvironmentViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EEnvironmentViewTypeItemProvider eEnvironmentViewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EEnvironmentViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEEnvironmentViewTypeAdapter() {
		if (eEnvironmentViewTypeItemProvider == null) {
			eEnvironmentViewTypeItemProvider = new EEnvironmentViewTypeItemProvider(this);
		}

		return eEnvironmentViewTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EAllocationViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAllocationViewTypeItemProvider eAllocationViewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EAllocationViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAllocationViewTypeAdapter() {
		if (eAllocationViewTypeItemProvider == null) {
			eAllocationViewTypeItemProvider = new EAllocationViewTypeItemProvider(this);
		}

		return eAllocationViewTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EAssemblyViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAssemblyViewTypeItemProvider eAssemblyViewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EAssemblyViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAssemblyViewTypeAdapter() {
		if (eAssemblyViewTypeItemProvider == null) {
			eAssemblyViewTypeItemProvider = new EAssemblyViewTypeItemProvider(this);
		}

		return eAssemblyViewTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ERepositoryViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERepositoryViewTypeItemProvider eRepositoryViewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ERepositoryViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createERepositoryViewTypeAdapter() {
		if (eRepositoryViewTypeItemProvider == null) {
			eRepositoryViewTypeItemProvider = new ERepositoryViewTypeItemProvider(this);
		}

		return eRepositoryViewTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ESystemIndependentViewPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESystemIndependentViewPointItemProvider eSystemIndependentViewPointItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ESystemIndependentViewPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESystemIndependentViewPointAdapter() {
		if (eSystemIndependentViewPointItemProvider == null) {
			eSystemIndependentViewPointItemProvider = new ESystemIndependentViewPointItemProvider(this);
		}

		return eSystemIndependentViewPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EAssemblyViewPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EAssemblyViewPointItemProvider eAssemblyViewPointItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EAssemblyViewPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEAssemblyViewPointAdapter() {
		if (eAssemblyViewPointItemProvider == null) {
			eAssemblyViewPointItemProvider = new EAssemblyViewPointItemProvider(this);
		}

		return eAssemblyViewPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EDeploymentViewPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EDeploymentViewPointItemProvider eDeploymentViewPointItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EDeploymentViewPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEDeploymentViewPointAdapter() {
		if (eDeploymentViewPointItemProvider == null) {
			eDeploymentViewPointItemProvider = new EDeploymentViewPointItemProvider(this);
		}

		return eDeploymentViewPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EBehaviourDescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBehaviourDescriptionItemProvider eBehaviourDescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EBehaviourDescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBehaviourDescriptionAdapter() {
		if (eBehaviourDescriptionItemProvider == null) {
			eBehaviourDescriptionItemProvider = new EBehaviourDescriptionItemProvider(this);
		}

		return eBehaviourDescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EInternalAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EInternalActionItemProvider eInternalActionItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EInternalAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEInternalActionAdapter() {
		if (eInternalActionItemProvider == null) {
			eInternalActionItemProvider = new EInternalActionItemProvider(this);
		}

		return eInternalActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EExternalCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EExternalCallItemProvider eExternalCallItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EExternalCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEExternalCallAdapter() {
		if (eExternalCallItemProvider == null) {
			eExternalCallItemProvider = new EExternalCallItemProvider(this);
		}

		return eExternalCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.EBranch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EBranchItemProvider eBranchItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.EBranch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEBranchAdapter() {
		if (eBranchItemProvider == null) {
			eBranchItemProvider = new EBranchItemProvider(this);
		}

		return eBranchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mdsd.component_based.ELoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELoopItemProvider eLoopItemProvider;

	/**
	 * This creates an adapter for a {@link mdsd.component_based.ELoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELoopAdapter() {
		if (eLoopItemProvider == null) {
			eLoopItemProvider = new ELoopItemProvider(this);
		}

		return eLoopItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (eRepositoryItemProvider != null)
			eRepositoryItemProvider.dispose();
		if (eSignatureItemProvider != null)
			eSignatureItemProvider.dispose();
		if (eComponentItemProvider != null)
			eComponentItemProvider.dispose();
		if (eInterfaceItemProvider != null)
			eInterfaceItemProvider.dispose();
		if (eParameterItemProvider != null)
			eParameterItemProvider.dispose();
		if (eServiceItemProvider != null)
			eServiceItemProvider.dispose();
		if (eAssemblyContextItemProvider != null)
			eAssemblyContextItemProvider.dispose();
		if (eCompositeComponentItemProvider != null)
			eCompositeComponentItemProvider.dispose();
		if (eSystemItemProvider != null)
			eSystemItemProvider.dispose();
		if (eAssemblyConnectorItemProvider != null)
			eAssemblyConnectorItemProvider.dispose();
		if (eContainerItemProvider != null)
			eContainerItemProvider.dispose();
		if (eLinkItemProvider != null)
			eLinkItemProvider.dispose();
		if (eAllocationContextItemProvider != null)
			eAllocationContextItemProvider.dispose();
		if (eRequiredDelegationConnectorItemProvider != null)
			eRequiredDelegationConnectorItemProvider.dispose();
		if (eProvidedDelegationConnectorItemProvider != null)
			eProvidedDelegationConnectorItemProvider.dispose();
		if (eRequiredRoleItemProvider != null)
			eRequiredRoleItemProvider.dispose();
		if (eProvidedRoleItemProvider != null)
			eProvidedRoleItemProvider.dispose();
		if (eEnvironmentViewTypeItemProvider != null)
			eEnvironmentViewTypeItemProvider.dispose();
		if (eAllocationViewTypeItemProvider != null)
			eAllocationViewTypeItemProvider.dispose();
		if (eAssemblyViewTypeItemProvider != null)
			eAssemblyViewTypeItemProvider.dispose();
		if (eRepositoryViewTypeItemProvider != null)
			eRepositoryViewTypeItemProvider.dispose();
		if (eSystemIndependentViewPointItemProvider != null)
			eSystemIndependentViewPointItemProvider.dispose();
		if (eAssemblyViewPointItemProvider != null)
			eAssemblyViewPointItemProvider.dispose();
		if (eDeploymentViewPointItemProvider != null)
			eDeploymentViewPointItemProvider.dispose();
		if (eBehaviourDescriptionItemProvider != null)
			eBehaviourDescriptionItemProvider.dispose();
		if (eInternalActionItemProvider != null)
			eInternalActionItemProvider.dispose();
		if (eExternalCallItemProvider != null)
			eExternalCallItemProvider.dispose();
		if (eBranchItemProvider != null)
			eBranchItemProvider.dispose();
		if (eLoopItemProvider != null)
			eLoopItemProvider.dispose();
	}

}
